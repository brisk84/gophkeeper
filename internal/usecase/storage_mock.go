// Code generated by mockery v2.23.2. DO NOT EDIT.

package usecase

import (
	context "context"

	domain "github.com/brisk84/gophkeeper/domain"
	mock "github.com/stretchr/testify/mock"
)

// storageMock is an autogenerated mock type for the storage type
type storageMock struct {
	mock.Mock
}

// GetByLogin provides a mock function with given fields: ctx, login
func (_m *storageMock) GetByLogin(ctx context.Context, login string) (string, error) {
	ret := _m.Called(ctx, login)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *storageMock) GetByToken(ctx context.Context, token string) (domain.User, error) {
	ret := _m.Called(ctx, token)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: ctx, userId, dataId
func (_m *storageMock) GetData(ctx context.Context, userId int, dataId int) ([]byte, error) {
	ret := _m.Called(ctx, userId, dataId)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]byte, error)); ok {
		return rf(ctx, userId, dataId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []byte); ok {
		r0 = rf(ctx, userId, dataId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, dataId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListData provides a mock function with given fields: ctx, userId
func (_m *storageMock) ListData(ctx context.Context, userId int) ([]domain.Data, error) {
	ret := _m.Called(ctx, userId)

	var r0 []domain.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.Data, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.Data); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveData provides a mock function with given fields: ctx, userId, title, data, dataType
func (_m *storageMock) SaveData(ctx context.Context, userId int, title string, data []byte, dataType string) (int, error) {
	ret := _m.Called(ctx, userId, title, data, dataType)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []byte, string) (int, error)); ok {
		return rf(ctx, userId, title, data, dataType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []byte, string) int); ok {
		r0 = rf(ctx, userId, title, data, dataType)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, []byte, string) error); ok {
		r1 = rf(ctx, userId, title, data, dataType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLogin provides a mock function with given fields: ctx, userId, title, login, pass
func (_m *storageMock) SaveLogin(ctx context.Context, userId int, title string, login string, pass string) (int, error) {
	ret := _m.Called(ctx, userId, title, login, pass)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) (int, error)); ok {
		return rf(ctx, userId, title, login, pass)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) int); ok {
		r0 = rf(ctx, userId, title, login, pass)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, string) error); ok {
		r1 = rf(ctx, userId, title, login, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *storageMock) SaveUser(ctx context.Context, user domain.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByLogin provides a mock function with given fields: ctx, login, token
func (_m *storageMock) UpdateByLogin(ctx context.Context, login string, token string) error {
	ret := _m.Called(ctx, login, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewStorageMock interface {
	mock.TestingT
	Cleanup(func())
}

// newStorageMock creates a new instance of storageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newStorageMock(t mockConstructorTestingTnewStorageMock) *storageMock {
	mock := &storageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
